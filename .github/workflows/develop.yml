name: develop

on:
  push:
    branches:
      - develop

jobs:
  build-test-release-ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
    - name: Build with dotnet
      run: dotnet build -c Release -v minimal
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
    - name: Unit tests
      run: cd TidalTests && dotnet test --collect:"XPlat Code Coverage" -r coverage --settings test.runsettings
    - name: Prep coverage
      run: mv TidalTests/coverage/**/*.xml .
    - name: Download Codacy
      run: curl -Ls "https://github.com/codacy/csharp-codacy-coverage/releases/download/$CODACY_COVERAGE_VERSION/Codacy.CSharpCoverage_linux-x64" --output Codacy.CSharpCoverage_linux-x64 && chmod +x ./Codacy.CSharpCoverage_linux-x64
      env:
        CODACY_COVERAGE_VERSION: "1.0.8"
    - name: Publish coverage
      run: ./Codacy.CSharpCoverage_linux-x64 -c $(git rev-parse --short "$GITHUB_SHA") -t "$CODACY_PROJECT_TOKEN" -r coverage.opencover.xml -e opencover
      env:
        CODACY_PROJECT_TOKEN: ${{ secrets.CodacyProjectToken }}
    - name: Pack release
      run: dotnet pack -c Release TidalUSDK
    - uses: actions/upload-artifact@master
      with:
        name: TidalUSDK-release
        path: TidalUSDK/bin/Release/
    - name: Publish NuGet
      run: cd TidalUSDK/bin/Release/ && for pkg in *.nupkg; do dotnet nuget push $pkg -k $nuget_api_key -s https://api.nuget.org/v3/index.json; done
      env:
        nuget_api_key: ${{ secrets.NugetApiKey }}

  test-windows:
    needs: [build-test-release-ubuntu]
    strategy:
      matrix:
        platform: [windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
    - name: Unit tests
      run: dotnet test
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1